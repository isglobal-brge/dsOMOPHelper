[{"path":"/articles/01_demo.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"General demonstration","text":"using dsOMOPHelper, recommended basic understanding : OMOP CDM structure standardized clinical data format. can learn OMOP CDM OHDSI Book chapter ‘Common Data Model’. OMOP Vocabularies standardize medical concepts (like diagnoses, medications, procedures) across different coding systems (ICD-9, ICD-10, SNOMED CT, etc.) common representation. OHDSI Book chapter ‘Standardized Vocabularies’ provides comprehensive overview standardization process. Basic DataSHIELD concepts workflow. DataSHIELD Beginner’s Tutorial good starting point. knowledge help better understand effectively query work OMOP CDM data DataSHIELD infrastructure.","code":""},{"path":"/articles/01_demo.html","id":"establishing-a-connection","dir":"Articles","previous_headings":"","what":"Establishing a connection","title":"General demonstration","text":"example, using MIMIC IV data available OBiBa’s public Opal demo server. server publicly accessible, users able reproduce examples guide executing commands R session. access credentials : Server URL: https://opal-demo.obiba.org User: dsuser Password: P@ssw0rd Profile: omop First, establish connection demo server using DSI provided credentials:","code":"library(DSI) library(DSOpal) library(dsBaseClient) library(dsOMOPClient) library(dsOMOPHelper)  builder <- newDSLoginBuilder() builder$append(   server = \"opal_demo\",   url = \"https://opal-demo.obiba.org\",   user = \"dsuser\",   password = \"P@ssw0rd\",   profile = \"omop\" ) logindata <- builder$build() conns <- datashield.login(logins = logindata)"},{"path":"/articles/01_demo.html","id":"creating-an-interface-helper-object","dir":"Articles","previous_headings":"","what":"Creating an interface helper object","title":"General demonstration","text":"successfully established connection server, create interface helper object ds.omop.helper. function creates interface object allows users interact OMOP CDM database based resource. can use methods available object obtain data database applying desired filters querying data catalogs information present database. server contains database connection resource name mimiciv within omop_demo project. Therefore, need specify , connection established, want take omop_demo.mimiciv resource. also need specify symbol want use refer object. case, use mimiciv symbol name: creating helper object, data Person table automatically loaded specified symbol, case, mimiciv. can check contents symbol using ds.summary function dsBaseClient: Therefore, using Person table foundation since serves central link clinical data tables OMOP CDM databases. , build study-specific table adding necessary data tables based variables required particular study.","code":"o <- ds.omop.helper(connections = conns,                     resource = \"omop_demo.mimiciv\",                     symbol = \"mimiciv\") ds.summary(\"mimiciv\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 5 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        ## [4] \"race_concept_id\"      \"ethnicity_concept_id\""},{"path":"/articles/01_demo.html","id":"exploring-the-data","dir":"Articles","previous_headings":"","what":"Exploring the data","title":"General demonstration","text":"can construct study table, ’s essential understand data available database. achieve , can use data exploration methods provided ds.omop.helper, allow us identify available tables database, well concepts columns table contains.","code":""},{"path":"/articles/01_demo.html","id":"tables","dir":"Articles","previous_headings":"Exploring the data","what":"Tables","title":"General demonstration","text":"tables method returns list available tables database:","code":"o$tables() ## $opal_demo ##  [1] \"attribute_definition\" \"care_site\"            \"cdm_source\"           ##  [4] \"cohort\"               \"cohort_attribute\"     \"cohort_definition\"    ##  [7] \"concept\"              \"concept_relationship\" \"condition_era\"        ## [10] \"condition_occurrence\" \"cost\"                 \"death\"                ## [13] \"device_exposure\"      \"dose_era\"             \"drug_era\"             ## [16] \"drug_exposure\"        \"fact_relationship\"    \"location\"             ## [19] \"measurement\"          \"metadata\"             \"note\"                 ## [22] \"note_nlp\"             \"observation\"          \"observation_period\"   ## [25] \"payer_plan_period\"    \"person\"               \"procedure_occurrence\" ## [28] \"provider\"             \"specimen\"             \"visit_detail\"         ## [31] \"visit_occurrence\"     \"vocabulary\""},{"path":"/articles/01_demo.html","id":"concepts","dir":"Articles","previous_headings":"Exploring the data","what":"Concepts","title":"General demonstration","text":"concepts method returns data frame functions dictionary available concepts within specific table. , concept_id refers identifier present concepts, concept_name textual name assigned concept. instance, want explore concepts available Condition_occurrence table:","code":"o$concepts(\"condition_occurrence\") ## $opal_demo ##    concept_id             concept_name ## 1       27674      Nausea and vomiting ## 2       29735     Candidiasis of mouth ## 3       31317                Dysphagia ## 4       73553              Arthropathy ## 5       75576 Irritable bowel syndrome ## 6       75860             Constipation ## 7       77670               Chest pain ## 8       78232      Shoulder joint pain ## 9       79864       Hematuria syndrome ## 10      80180           Osteoarthritis ##  [ reached 'max' / getOption(\"max.print\") -- omitted 236 rows ]"},{"path":"/articles/01_demo.html","id":"columns","dir":"Articles","previous_headings":"Exploring the data","what":"Columns","title":"General demonstration","text":"columns method returns list available column names specific table. enables us understand information can extract table, allowing us select columns necessary study:","code":"o$columns(\"condition_occurrence\") ## $opal_demo ## $opal_demo$condition_occurrence ##  [1] \"condition_occurrence_id\"       \"person_id\"                     ##  [3] \"condition_concept_id\"          \"condition_start_date\"          ##  [5] \"condition_start_datetime\"      \"condition_end_date\"            ##  [7] \"condition_end_datetime\"        \"condition_type_concept_id\"     ##  [9] \"stop_reason\"                   \"provider_id\"                   ## [11] \"visit_occurrence_id\"           \"visit_detail_id\"               ## [13] \"condition_source_value\"        \"condition_source_concept_id\"   ## [15] \"condition_status_source_value\" \"condition_status_concept_id\""},{"path":"/articles/01_demo.html","id":"retrieving-tables","dir":"Articles","previous_headings":"","what":"Retrieving tables","title":"General demonstration","text":"explored data available database, now ready build study-specific table. , ’ll employ auto method provided dsOMOPHelper. method simplifies task automatically extracting appending variables various tables initial table (currently includes data Person table). auto method uses following arguments: tables: character vector names tables want extract data. concepts: numeric vector concept IDs concepts want extract. columns: character vector column names tables want extract data. optional, highly recommended utilize expedite data extraction process construction study table. instance, let’s assume , data exploration phase using methods described , decided extract data condition Cardiac arrhythmia, concept ID 44784217 found Condition_occurrence table, observation Body mass index 40+ - severely obese, concept ID 4256640 located Observation table. want columns related variables, specify column filters. call auto method follows: can see, table mimiciv now contains information Condition_occurrence Observation tables, columns related variables interest.","code":"o$auto(tables = c(\"condition_occurrence\", \"observation\"),        concepts = c(44784217, 4256640))  ds.summary(\"mimiciv\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 18 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                                                     ##  [2] \"gender_concept_id\"                                             ##  [3] \"year_of_birth\"                                                 ##  [4] \"race_concept_id\"                                               ##  [5] \"ethnicity_concept_id\"                                          ##  [6] \"cardiac_arrhythmia.condition_occurrence_id\"                    ##  [7] \"cardiac_arrhythmia.condition_start_date\"                       ##  [8] \"cardiac_arrhythmia.condition_start_datetime\"                   ##  [9] \"cardiac_arrhythmia.condition_end_date\"                         ## [10] \"cardiac_arrhythmia.condition_end_datetime\"                     ## [11] \"cardiac_arrhythmia.condition_type_concept_id\"                  ## [12] \"cardiac_arrhythmia.visit_occurrence_id\"                        ## [13] \"body_mass_index_40_severely_obese.observation_id\"              ## [14] \"body_mass_index_40_severely_obese.observation_date\"            ## [15] \"body_mass_index_40_severely_obese.observation_datetime\"        ## [16] \"body_mass_index_40_severely_obese.observation_type_concept_id\" ## [17] \"body_mass_index_40_severely_obese.value_as_string\"             ## [18] \"body_mass_index_40_severely_obese.visit_occurrence_id\""},{"path":"/articles/01_demo.html","id":"examples-of-usage","dir":"Articles","previous_headings":"","what":"Examples of usage","title":"General demonstration","text":"section, explore examples can use data extraction functions dsOMOPHelper conjunction DataSHIELD’s environment functions manipulate analyze data. Let’s say want add observation Marital status [NHANES] study table. , first need identify corresponding concept, case 40766231 found Observation table database. instance, since interested primary value categorical variable, aim retrieve data value_as_concept_id column. call auto function follows: can see, successfully obtained categorical variable containing marital status information patients, specifically following categories: divorced, married, never_married, widowed. Now, can use ds.table function dsBaseClient obtain frequency table variable: now want extract numerical variable, instance, Body weight, identified concept ID 3025315 located Measurement table. scenario, goal retrieve data value_as_number column. call auto function follows: can see, successfully obtained numerical variable contains body weight patients. visually inspect distribution variable, can generate histogram using ds.histogram function dsBaseClient:  Finally, perform generalized linear regression (GLM) analysis evaluate relationship blood glucose, hemoglobin A1c, vitamin B12. , first need extract variables interest corresponding tables, present Measurement table. blood glucose, use concept ID 3000483, corresponds Glucose [Mass/volume] Blood. hemoglobin A1c, concept ID 3004410, representing Hemoglobin A1c/Hemoglobin.total Blood. Lastly, vitamin B12, refer concept ID 3000593, linked Cobalamin (Vitamin B12) [Mass/volume] Serum Plasma. objective extract numerical values variables, hence focus retrieving data specifically value_as_number column. data extracted, can use ds.glm function dsBaseClient perform generalized linear regression analysis: can see, data extracted dsOMOPHelper can perfectly integrated DataSHIELD’s environment functions perform wide range operations, simple descriptive statistics complex statistical modeling. However, due reduced size sample data available public demo server, results GLM analysis statistically significant. statistically significant analysis, included COPD analysis vignette reproduces studies literature using larger database publicly available demo server.","code":"o$auto(tables = c(\"observation\"),        concepts = c(40766231),        columns = c(\"value_as_concept_id\"))  ds.summary(\"mimiciv$marital_status_nhanes.value_as_concept_id\") ## $opal_demo ## $opal_demo$class ## [1] \"factor\" ##  ## $opal_demo$length ## [1] 100 ##  ## $opal_demo$categories ## [1] \"divorced\"      \"married\"       \"never_married\" \"widowed\"       ##  ## $opal_demo$`count of 'divorced'` ## [1] 10 ##  ## $opal_demo$`count of 'married'` ## [1] 36 ##  ## $opal_demo$`count of 'never_married'` ## [1] 30 ##  ## $opal_demo$`count of 'widowed'` ## [1] 12 ds.table(\"mimiciv$marital_status_nhanes.value_as_concept_id\") ##  ##  Data in all studies were valid  ##  ## Study 1 :  No errors reported from this study ## $output.list ## $output.list$TABLE_rvar.by.study_row.props ##                                                  study ## mimiciv$marital_status_nhanes.value_as_concept_id opal_demo ##                                     divorced              1 ##                                     married               1 ##                                     never_married         1 ##                                     widowed               1 ##                                     NA                    1 ##  ## $output.list$TABLE_rvar.by.study_col.props ##                                                  study ## mimiciv$marital_status_nhanes.value_as_concept_id opal_demo ##                                     divorced           0.10 ##                                     married            0.36 ##                                     never_married      0.30 ##                                     widowed            0.12 ##                                     NA                 0.12 ##  ## $output.list$TABLE_rvar.by.study_counts ##                                                  study ## mimiciv$marital_status_nhanes.value_as_concept_id opal_demo ##                                     divorced             10 ##                                     married              36 ##                                     never_married        30 ##                                     widowed              12 ##                                     NA                   12 ##  ## $output.list$TABLES.COMBINED_all.sources_proportions ## mimiciv$marital_status_nhanes.value_as_concept_id ##      divorced       married never_married       widowed            NA  ##          0.10          0.36          0.30          0.12          0.12  ##  ## $output.list$TABLES.COMBINED_all.sources_counts ## mimiciv$marital_status_nhanes.value_as_concept_id ##      divorced       married never_married       widowed            NA  ##            10            36            30            12            12  ##  ##  ## $validity.message ## [1] \"Data in all studies were valid\" o$auto(tables = c(\"measurement\"),        concepts = c(3025315),        columns = c(\"value_as_number\"))  ds.summary(\"mimiciv$body_weight.value_as_number\") ## $opal_demo ## $opal_demo$class ## [1] \"numeric\" ##  ## $opal_demo$length ## [1] 100 ##  ## $opal_demo$`quantiles & mean` ##        5%       10%       25%       50%       75%       90%       95%  ##  52.43500  59.26000  68.70000  80.00000  97.22500 121.95000 149.09000  ##      Mean  ##  86.80918 ds.histogram(\"mimiciv$body_weight.value_as_number\") ## $breaks ##  [1]  37.91096  54.73780  71.56463  88.39147 105.21830 122.04514 138.87198 ##  [8] 155.69881 172.52565 189.35248 206.17932 ##  ## $counts ##  [1]  8 24 29 20  7  3  0  3  0  0 ##  ## $density ##  [1] 0.004851337 0.014554011 0.017586097 0.012128343 0.004244920 ##  [6] 0.001819251 0.000000000 0.001819251 0.000000000 0.000000000 ##  ## $mids ##  [1]  46.32438  63.15121  79.97805  96.80489 113.63172 130.45856 147.28539 ##  [8] 164.11223 180.93906 197.76590 ##  ## $xname ## [1] \"xvect\" ##  ## $equidist ## [1] TRUE ##  ## attr(,\"class\") ## [1] \"histogram\" o$auto(tables = c(\"measurement\"),        concepts = c(3000483, 3004410, 3000593),        columns = c(\"value_as_number\"))  ds.glm(formula = \"glucose_mass_volume_in_blood.value_as_number ~                    hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number +                    cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number\",        data = \"mimiciv\",        family = \"gaussian\",        datasources = conns) ## $Nvalid ## [1] 10 ##  ## $Nmissing ## [1] 90 ##  ## $Ntotal ## [1] 100 ##  ## $disclosure.risk ##           RISK OF DISCLOSURE ## opal_demo                  0 ##  ## $errorMessage ##           ERROR MESSAGES ## opal_demo \"No errors\"    ##  ## $nsubs ## [1] 10 ##  ## $iter ## [1] 3 ##  ## $family ##  ## Family: gaussian  ## Link function: identity  ##  ##  ## $formula ## [1] \"glucose_mass_volume_in_blood.value_as_number ~ hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number +      cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number\" ##  ## $coefficients ##                                                                          Estimate ## (Intercept)                                                          120.95889328 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number               0.82795236 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number  -0.01610667 ##                                                                       Std. Error ## (Intercept)                                                          89.11697092 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number             11.55494959 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number  0.04187167 ##                                                                          z-value ## (Intercept)                                                           1.35730481 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number              0.07165348 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number -0.38466759 ##                                                                        p-value ## (Intercept)                                                          0.1746844 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number             0.9428777 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number 0.7004837 ##                                                                         low0.95CI ## (Intercept)                                                          -53.70716014 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number             -21.81933267 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number  -0.09817364 ##                                                                        high0.95CI ## (Intercept)                                                          295.62494670 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number              23.47523740 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number   0.06596029 ##  ## $dev ## [1] 21068.15 ##  ## $df ## [1] 7 ##  ## $output.information ## [1] \"SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES\""},{"path":"/articles/02_copd.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"reproducibility analysis, utilized Tufts Synthetic Dataset, consists fully synthetic electronic health record (EHR) data representing 567,000 synthetic patients. dataset generated 2021 collaboration Syntegra, Inc. Tufts Medical Center, using deep learning transformer model. model trained real-world EHR data Tufts Research Data Warehouse (TRDW), includes longitudinal clinical data patients received care Tufts Medical Center. Tufts Synthetic Dataset contains clinical information patient visits, conditions, medications, laboratory measurements, procedures, observations, device exposures, structured according OMOP Common Data Model (CDM) version 5.3. analysis, focused identifying key predictors chronic obstructive pulmonary disease (COPD) based relevance literature availability representation dataset, ensuring sufficient patient population obtain statistically meaningful results. variables well-established associations COPD: Tobacco use Vitamin D deficiency History asthma History rheumatoid arthritis","code":""},{"path":"/articles/02_copd.html","id":"server-connection","dir":"Articles","previous_headings":"","what":"Server connection","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"start establishing connection ISGlobal’s BRGE development Opal server. Opal server configured allow access resource Tufts Synthetic Dataset: create instance dsOMOPHelper interact database build desired dataset:","code":"library(DSI) library(DSOpal) library(dsBaseClient) library(dsOMOPClient) library(dsOMOPHelper)  builder <- newDSLoginBuilder()  builder$append(server=\"server1\",                 url=\"https://opal.isglobal.org/brge\",                user=\"administrator\",                 password=\"password\",                 driver = \"OpalDriver\")  logindata <- builder$build() conns <- datashield.login(logins=logindata) o <- ds.omop.helper(     connections = conns,     resource = \"omop_demo.tufts\",      symbol = \"tufts\" )"},{"path":[]},{"path":"/articles/02_copd.html","id":"variable-definition","dir":"Articles","previous_headings":"Dataset construction","what":"Variable definition","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"define variables present dataset. variables include outcome variable predictor variables ’ll use generalized linear model (GLM) COPD: Based structure script, can easily change concept IDs variables re-run script analyze different conditions predictors.","code":"# Outcome variable outcome_concept_id <- 255573 # Chronic Obstructive Pulmonary Disease (COPD)  # Predictor variables observation_list <- c(     4005823 # Tobacco use )  condition_list <- c(     317009, # History of asthma     436070, # Rheumatoid arthritis     80809   # Vitamin D deficiency )  # We check the structure of the resulting table to ensure it is correctly loaded ds.summary(\"tufts\") ## $server1 ## $server1$class ## [1] \"data.frame\" ##  ## $server1$`number of rows` ## [1] 576750 ##  ## $server1$`number of columns` ## [1] 11 ##  ## $server1$`variables held` ##  [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        ##  [4] \"month_of_birth\"       \"day_of_birth\"         \"birth_datetime\"       ##  [7] \"race_concept_id\"      \"ethnicity_concept_id\" \"location_id\"          ## [10] \"provider_id\"          \"care_site_id\""},{"path":"/articles/02_copd.html","id":"data-retrieval","dir":"Articles","previous_headings":"Dataset construction","what":"Data retrieval","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"use dsOMOPHelper’s auto function retrieve defined variables:","code":"o$auto(     table = \"condition_occurrence\",      concepts = c(outcome_concept_id, condition_list),     columns = c(\"condition_occurrence_id\")      # We only want the condition occurrence ID to act as a boolean indicating      # the presence of the condition occurrence )  o$auto(     table = \"observation\",      concepts = observation_list,     columns = c(\"observation_id\")     # We only want the observation ID to act as a boolean indicating      # the presence of the observation )"},{"path":"/articles/02_copd.html","id":"data-type-conversions","dir":"Articles","previous_headings":"Dataset construction","what":"Data type conversions","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"DataSHIELD transform ID boolean string format, process involves two steps: 1. Transforming ID numeric 2. Transforming numeric ID boolean defined function automatically every variable: Now can apply function selected variables:","code":"convert_to_numeric_and_boolean <- function(variable_name, id_type, conns) {   # Construct the full variable name in the format \"tufts$variable_name.id_type\"   full_variable_name <- paste0(\"tufts$\", variable_name, \".\", id_type)   # Create a new variable name for the numeric conversion   new_numeric_name <- paste0(variable_name, \"_numeric\")      # Convert the original variable to numeric   ds.asNumeric(     x.name = full_variable_name,      newobj = new_numeric_name,      datasources = conns   )    # Convert the numeric variable to boolean   # True (1) if not equal to 0, False (0) otherwise   # NA values are assigned 0   ds.Boole(     V1 = new_numeric_name,      V2 = 0,      Boolean.operator = \"!=\",      numeric.output = TRUE,      na.assign = 0,      newobj = variable_name   ) } # Convert tobacco use observation to numeric and boolean convert_to_numeric_and_boolean(\"tobacco_user\", \"observation_id\", conns) ## $is.object.created ## [1] \"A data object <tobacco_user> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<tobacco_user> appears valid in all sources\" # Convert condition occurrences to numeric and boolean convert_to_numeric_and_boolean(\"rheumatoid_arthritis\", \"condition_occurrence_id\", conns) ## $is.object.created ## [1] \"A data object <rheumatoid_arthritis> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<rheumatoid_arthritis> appears valid in all sources\" convert_to_numeric_and_boolean(\"asthma\", \"condition_occurrence_id\", conns) ## $is.object.created ## [1] \"A data object <asthma> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<asthma> appears valid in all sources\" convert_to_numeric_and_boolean(\"vitamin_d_deficiency\", \"condition_occurrence_id\", conns) ## $is.object.created ## [1] \"A data object <vitamin_d_deficiency> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<vitamin_d_deficiency> appears valid in all sources\" # Convert outcome variable to numeric and boolean convert_to_numeric_and_boolean(\"chronic_obstructive_pulmonary_disease\", \"condition_occurrence_id\", conns) ## $is.object.created ## [1] \"A data object <chronic_obstructive_pulmonary_disease> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<chronic_obstructive_pulmonary_disease> appears valid in all sources\""},{"path":"/articles/02_copd.html","id":"create-table-for-the-glm","dir":"Articles","previous_headings":"Dataset construction","what":"Create table for the GLM","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"create new table prepared outcome predictors GLM:","code":"# Get the exact name of the variables as they will be in the dataset variable_names <- c(   \"chronic_obstructive_pulmonary_disease\",   \"tobacco_user\",   \"rheumatoid_arthritis\",   \"asthma\",   \"vitamin_d_deficiency\" )  # Create a new table with the prepared outcome and predictors ds.cbind(   x = variable_names,   DataSHIELD.checks = FALSE,   newobj = \"glm_table\",   datasources = conns ) ## $is.object.created ## [1] \"A data object <glm_table> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<glm_table> appears valid in all sources\" # We check the structure of the resulting table to ensure it has been created correctly ds.summary(\"glm_table\") ## $server1 ## $server1$class ## [1] \"data.frame\" ##  ## $server1$`number of rows` ## [1] 576750 ##  ## $server1$`number of columns` ## [1] 5 ##  ## $server1$`variables held` ## [1] \"chronic_obstructive_pulmonary_disease\" ## [2] \"tobacco_user\"                          ## [3] \"rheumatoid_arthritis\"                  ## [4] \"asthma\"                                ## [5] \"vitamin_d_deficiency\""},{"path":"/articles/02_copd.html","id":"generalized-linear-model","dir":"Articles","previous_headings":"","what":"Generalized Linear Model","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP","text":"Now, can finally execute final step - running GLM prepared dataset: next chapter, provide template creating analysis conditions predictors. allow easily adapt analysis specific needs, OMOP CDM database.","code":"# Define the formula for the GLM formula <- paste0(   \"chronic_obstructive_pulmonary_disease ~ \",    paste(     c(       \"tobacco_user\",       \"rheumatoid_arthritis\",       \"asthma\",       \"vitamin_d_deficiency\"     ),     collapse = \" + \"   ) )  # Fit the GLM ds.glm(   formula = formula,    data = \"glm_table\",    family = \"binomial\" ) ## $Nvalid ## [1] 576750 ##  ## $Nmissing ## [1] 0 ##  ## $Ntotal ## [1] 576750 ##  ## $disclosure.risk ##         RISK OF DISCLOSURE ## server1                  0 ##  ## $errorMessage ##         ERROR MESSAGES ## server1 \"No errors\"    ##  ## $nsubs ## [1] 576750 ##  ## $iter ## [1] 10 ##  ## $family ##  ## Family: binomial  ## Link function: logit  ##  ##  ## $formula ## [1] \"chronic_obstructive_pulmonary_disease ~ tobacco_user + rheumatoid_arthritis +      asthma + vitamin_d_deficiency\" ##  ## $coefficients ##                       Estimate Std. Error     z-value       p-value ## (Intercept)          -6.572083 0.03534378 -185.947355  0.000000e+00 ## tobacco_user          1.860760 0.24413811    7.621753  2.502536e-14 ## rheumatoid_arthritis  2.106862 0.39986610    5.268918  1.372299e-07 ## asthma                2.996876 0.11485691   26.092255 4.463685e-150 ## vitamin_d_deficiency  1.814804 0.30800707    5.892084  3.813549e-09 ##                      low0.95CI.LP high0.95CI.LP         P_OR ## (Intercept)             -6.641355     -6.502810  0.001396927 ## tobacco_user             1.382258      2.339262  6.428622994 ## rheumatoid_arthritis     1.323139      2.890585  8.222397606 ## asthma                   2.771760      3.221991 20.022883190 ## vitamin_d_deficiency     1.211121      2.418486  6.139869864 ##                      low0.95CI.P_OR high0.95CI.P_OR ## (Intercept)             0.001303556     0.001496976 ## tobacco_user            3.983888931    10.373580768 ## rheumatoid_arthritis    3.755189296    18.003838708 ## asthma                 15.986751946    25.078005376 ## vitamin_d_deficiency    3.357245312    11.228849381 ##  ## $dev ## [1] 13173.98 ##  ## $df ## [1] 576745 ##  ## $output.information ## [1] \"SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES\""},{"path":"/articles/03_copd_distributed.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"reproducibility analysis, utilized Tufts Synthetic Dataset, consists fully synthetic electronic health record (EHR) data representing 567,000 synthetic patients. dataset generated 2021 collaboration Syntegra, Inc. Tufts Medical Center, using deep learning transformer model. model trained real-world EHR data Tufts Research Data Warehouse (TRDW), includes longitudinal clinical data patients received care Tufts Medical Center. Tufts Synthetic Dataset contains clinical information patient visits, conditions, medications, laboratory measurements, procedures, observations, device exposures, structured according OMOP Common Data Model (CDM) version 5.3. analysis, focused identifying key predictors chronic obstructive pulmonary disease (COPD) based relevance literature availability representation dataset, ensuring sufficient patient population obtain statistically meaningful results. variables well-established associations COPD: Tobacco use Vitamin D deficiency History asthma History rheumatoid arthritis","code":""},{"path":"/articles/03_copd_distributed.html","id":"server-connection","dir":"Articles","previous_headings":"","what":"Server connection","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"start establishing connection ISGlobal’s BRGE internal Opal server: create instance dsOMOPHelper interact database build desired dataset:","code":"library(DSI) ## Loading required package: progress ## Loading required package: R6 library(DSOpal) ## Loading required package: opalr ## Loading required package: httr library(dsBaseClient) library(dsOMOPClient) library(dsOMOPHelper)  builder <- newDSLoginBuilder()  builder$append(server=\"server1\",                 url=\"https://opal.isglobal.org/brge1\",                user=\"administrator\",                 password=\"password\",                 driver = \"OpalDriver\")  builder$append(server=\"server2\",                 url=\"https://opal.isglobal.org/brge2\",                user=\"administrator\",                 password=\"password\",                 driver = \"OpalDriver\")  builder$append(server=\"server3\",                 url=\"https://opal.isglobal.org/brge3\",                user=\"administrator\",                 password=\"password\",                 driver = \"OpalDriver\")  logindata <- builder$build() conns <- datashield.login(logins=logindata) ##  ## Logging into the collaborating servers o <- ds.omop.helper(     connections = conns,     resource = list(\"server1\" = \"omop_demo.tufts_dist_1\",                     \"server2\" = \"omop_demo.tufts_dist_2\",                     \"server3\" = \"omop_demo.tufts_dist_3\"),     symbol = \"tufts\" )"},{"path":[]},{"path":"/articles/03_copd_distributed.html","id":"variable-definition","dir":"Articles","previous_headings":"Dataset construction","what":"Variable definition","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"define variables present dataset. variables include outcome variable predictor variables ’ll use generalized linear model (GLM) COPD: Based structure script, can easily change concept IDs variables re-run script analyze different conditions predictors.","code":"# Outcome variable outcome_concept_id <- 255573 # Chronic Obstructive Pulmonary Disease (COPD)  # Predictor variables concept_list <- c(     4005823 # Tobacco use )  condition_list <- c(     317009, # History of asthma     436070, # Rheumatoid arthritis     80809   # Vitamin D deficiency )"},{"path":"/articles/03_copd_distributed.html","id":"data-retrieval","dir":"Articles","previous_headings":"Dataset construction","what":"Data retrieval","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"use dsOMOPHelper’s auto function retrieve defined variables:","code":"o$auto(     table = \"condition_occurrence\",      concepts = c(outcome_concept_id, condition_list),     columns = c(\"condition_occurrence_id\")      # We only want the condition occurrence ID to act as a boolean indicating      # the presence of the condition occurrence )  o$auto(     table = \"observation\",      concepts = concept_list,     columns = c(\"observation_id\")     # We only want the observation ID to act as a boolean indicating      # the presence of the observation )"},{"path":"/articles/03_copd_distributed.html","id":"concept-name-matching","dir":"Articles","previous_headings":"Dataset construction","what":"Concept name matching","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"need identify format concept names added dataset. allows us automate process identifying exact variable names based retrieved concept names database, facilitates automation without manually change variable names script. function custom_make_names used format concept names dataset: Now can retrieve concept lists database match names expect dataset: used automatically match variable names dataset next step.","code":"custom_make_names <- function(name) {   name <- make.names(name)   name <- tolower(name)   name <- gsub(\"\\\\.\", \"_\", name)   name <- gsub(\"_+\", \"_\", name)   name <- gsub(\"^_|_$\", \"\", name)   return(name) } # Retrieve the concept catalogs for condition occurrence and observation all_concepts_condition <- o$concepts(\"condition_occurrence\", .Machine$integer.max)$server1 all_concepts_observation <- o$concepts(\"observation\", .Machine$integer.max)$server1  # Match the concept IDs to the concept catalogs matched_concept_condition <- all_concepts_condition[all_concepts_condition$concept_id == outcome_concept_id, ] matched_concepts_conditions <- all_concepts_condition[all_concepts_condition$concept_id %in% condition_list, ] matched_concepts_observation <- all_concepts_observation[all_concepts_observation$concept_id %in% concept_list, ]"},{"path":"/articles/03_copd_distributed.html","id":"data-type-conversions","dir":"Articles","previous_headings":"Dataset construction","what":"Data type conversions","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"DataSHIELD transform ID boolean string format, process involves two steps: 1. Transforming ID numeric 2. Transforming numeric ID boolean defined function automatically every variable: Now can apply function selected variables:","code":"convert_to_numeric_and_boolean <- function(variable_name, id_type, conns) {   # Construct the full variable name in the format \"tufts$variable_name.id_type\"   full_variable_name <- paste0(\"tufts$\", variable_name, \".\", id_type)   # Create a new variable name for the numeric conversion   new_numeric_name <- paste0(variable_name, \"_numeric\")      # Convert the original variable to numeric   ds.asNumeric(     x.name = full_variable_name,      newobj = new_numeric_name,      datasources = conns   )    # Convert the numeric variable to boolean   # True (1) if not equal to 0, False (0) otherwise   # NA values are assigned 0   ds.Boole(     V1 = new_numeric_name,      V2 = 0,      Boolean.operator = \"!=\",      numeric.output = TRUE,      na.assign = 0,      newobj = variable_name   ) } # Get the name of the outcome variable as it will be in the dataset outcome_variable <- custom_make_names(matched_concept_condition$concept_name) # Perform the type conversion of the outcome variable to numeric and then to boolean convert_to_numeric_and_boolean(outcome_variable, \"condition_occurrence_id\", conns) ## $is.object.created ## [1] \"A data object <chronic_obstructive_pulmonary_disease> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<chronic_obstructive_pulmonary_disease> appears valid in all sources\" # Loop through every recognized condition occurrence concept for (concept in matched_concepts_conditions$concept_name) {   # Get the exact name of the condition occurrence as it will be in the dataset   variable_name <- custom_make_names(concept)      # Perform the type conversion of the condition occurrence to numeric and then to boolean   convert_to_numeric_and_boolean(variable_name, \"condition_occurrence_id\", conns) }  # Loop through every recognized observation concept for (concept in matched_concepts_observation$concept_name) {   # Get the exact name of the observation as it will be in the dataset   variable_name <- custom_make_names(concept)      # Perform the type conversion of the observation to numeric and then to boolean   convert_to_numeric_and_boolean(variable_name, \"observation_id\", conns) }"},{"path":"/articles/03_copd_distributed.html","id":"create-table-for-the-glm","dir":"Articles","previous_headings":"Dataset construction","what":"Create table for the GLM","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"create new table prepared outcome predictors GLM:","code":"# Get the exact name of the variables as they will be in the dataset variable_names <- c(   unname(sapply(matched_concepts_observation$concept_name, custom_make_names)),   unname(sapply(matched_concepts_conditions$concept_name, custom_make_names)),   custom_make_names(outcome_variable) )  # Create a new table with the prepared outcome and predictors ds.cbind(   x = variable_names,   DataSHIELD.checks = FALSE,   newobj = \"glm_table\",   datasources = conns ) ## $is.object.created ## [1] \"A data object <glm_table> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<glm_table> appears valid in all sources\" # We check the structure of the resulting table to ensure it has been created correctly ds.summary(\"glm_table\") ## $server1 ## $server1$class ## [1] \"data.frame\" ##  ## $server1$`number of rows` ## [1] 192250 ##  ## $server1$`number of columns` ## [1] 5 ##  ## $server1$`variables held` ## [1] \"tobacco_user\"                          ## [2] \"rheumatoid_arthritis\"                  ## [3] \"asthma\"                                ## [4] \"vitamin_d_deficiency\"                  ## [5] \"chronic_obstructive_pulmonary_disease\" ##  ##  ## $server2 ## $server2$class ## [1] \"data.frame\" ##  ## $server2$`number of rows` ## [1] 192250 ##  ## $server2$`number of columns` ## [1] 5 ##  ## $server2$`variables held` ## [1] \"tobacco_user\"                          ## [2] \"rheumatoid_arthritis\"                  ## [3] \"asthma\"                                ## [4] \"vitamin_d_deficiency\"                  ## [5] \"chronic_obstructive_pulmonary_disease\" ##  ##  ## $server3 ## $server3$class ## [1] \"data.frame\" ##  ## $server3$`number of rows` ## [1] 192250 ##  ## $server3$`number of columns` ## [1] 5 ##  ## $server3$`variables held` ## [1] \"tobacco_user\"                          ## [2] \"rheumatoid_arthritis\"                  ## [3] \"asthma\"                                ## [4] \"vitamin_d_deficiency\"                  ## [5] \"chronic_obstructive_pulmonary_disease\""},{"path":"/articles/03_copd_distributed.html","id":"generalized-linear-model","dir":"Articles","previous_headings":"","what":"Generalized Linear Model","title":"Chronic Obstructive Pulmonary Disease (COPD) Analysis using dsOMOP in a Distributed Environment","text":"now fit GLM prepared dataset:","code":"# Define the formula for the GLM formula <- paste0(   \"glm_table$\", outcome_variable, \" ~ \",    paste(     c(       paste0(\"glm_table$\", custom_make_names(matched_concepts_observation$concept_name)),       paste0(\"glm_table$\", custom_make_names(matched_concepts_conditions$concept_name))     ),     collapse = \" + \"   ) )  # Fit the GLM ds.glm(   formula = formula,    data = \"glm_table\",    family = \"binomial\" ) ## $Nvalid ## [1] 576750 ##  ## $Nmissing ## [1] 0 ##  ## $Ntotal ## [1] 576750 ##  ## $disclosure.risk ##         RISK OF DISCLOSURE ## server1                  0 ## server2                  0 ## server3                  0 ##  ## $errorMessage ##         ERROR MESSAGES ## server1 \"No errors\"    ## server2 \"No errors\"    ## server3 \"No errors\"    ##  ## $nsubs ## [1] 576750 ##  ## $iter ## [1] 10 ##  ## $family ##  ## Family: binomial  ## Link function: logit  ##  ##  ## $formula ## [1] \"glm_table$chronic_obstructive_pulmonary_disease ~ glm_table$tobacco_user +      glm_table$rheumatoid_arthritis + glm_table$asthma + glm_table$vitamin_d_deficiency\" ##  ## $coefficients ##                                 Estimate Std. Error     z-value ## (Intercept)                    -6.572083 0.03534378 -185.947355 ## glm_table$tobacco_user          1.860760 0.24413811    7.621753 ## glm_table$rheumatoid_arthritis  2.106862 0.39986610    5.268918 ## glm_table$asthma                2.996876 0.11485691   26.092255 ## glm_table$vitamin_d_deficiency  1.814804 0.30800707    5.892084 ##                                      p-value low0.95CI.LP high0.95CI.LP ## (Intercept)                     0.000000e+00    -6.641355     -6.502810 ## glm_table$tobacco_user          2.502536e-14     1.382258      2.339262 ## glm_table$rheumatoid_arthritis  1.372299e-07     1.323139      2.890585 ## glm_table$asthma               4.463685e-150     2.771760      3.221991 ## glm_table$vitamin_d_deficiency  3.813549e-09     1.211121      2.418486 ##                                        P_OR low0.95CI.P_OR ## (Intercept)                     0.001396927    0.001303556 ## glm_table$tobacco_user          6.428622994    3.983888931 ## glm_table$rheumatoid_arthritis  8.222397606    3.755189296 ## glm_table$asthma               20.022883190   15.986751946 ## glm_table$vitamin_d_deficiency  6.139869864    3.357245312 ##                                high0.95CI.P_OR ## (Intercept)                        0.001496976 ## glm_table$tobacco_user            10.373580768 ## glm_table$rheumatoid_arthritis    18.003838708 ## glm_table$asthma                  25.078005376 ## glm_table$vitamin_d_deficiency    11.228849381 ##  ## $dev ## [1] 13173.98 ##  ## $df ## [1] 576745 ##  ## $output.information ## [1] \"SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES\""},{"path":"/articles/03_template.html","id":"step-1-server-connection","dir":"Articles","previous_headings":"","what":"STEP 1: Server connection","title":"Basic GLM with booleans template","text":"Change credentials : run following code connect server create database interface:","code":"your_url <- \"https://opal.isglobal.org/brge\" your_user <- \"administrator\" your_password <- \"password\" your_resource <- \"omop_demo.tufts\" library(DSI) library(DSOpal) library(dsBaseClient) library(dsOMOPClient) library(dsOMOPHelper)  builder <- newDSLoginBuilder()  builder$append(server=\"server1\",                 url=your_url,                user=your_user,                 password=your_password,                 driver = \"OpalDriver\")  logindata <- builder$build()  conns <- datashield.login(logins=logindata)  o <- ds.omop.helper(     connections = conns,     resource = your_resource,      symbol = \"original_dataset\" )"},{"path":"/articles/03_template.html","id":"step-2-dataset-exploration","dir":"Articles","previous_headings":"","what":"STEP 2: Dataset exploration","title":"Basic GLM with booleans template","text":"first retrieve concept catalogs conditions observations: Now can explore available concepts decide ones want use analysis. strongly recommend saving lists CSV files exploring comfortable environment. allow identify exact name variables want use analysis: Otherwise, can check concept catalogs directly printing : (actual concept list much longer, just demonstration purposes)","code":"condition_list <- o$concepts(\"condition_occurrence\", .Machine$integer.max)$server1 observation_list <- o$concepts(\"observation\", .Machine$integer.max)$server1 write.csv(condition_list, file = \"condition_list.csv\", row.names = FALSE) write.csv(observation_list, file = \"observation_list.csv\", row.names = FALSE) print(condition_list) ##   concept_id                   concept_name ## 1      22350                Edema of larynx ## 2      22492        Foreign body in pharynx ## 3      22955       Perforation of esophagus ## 4      23034          Neonatal hypoglycemia ## 5      23164 Disorder of anterior pituitary print(observation_list) ##   concept_id ## 1     141693 ## 2     432454 ## 3     432504 ## 4     432534 ## 5     432537 ##                                                        concept_name ## 1 Elevated blood-pressure reading without diagnosis of hypertension ## 2                                                  Excessive thirst ## 3                                Accident caused by fire and flames ## 4                                      Accident caused by machinery ## 5                                                Assault by handgun"},{"path":[]},{"path":"/articles/03_template.html","id":"variable-definition","dir":"Articles","previous_headings":"STEP 3: Dataset construction","what":"Variable definition","title":"Basic GLM with booleans template","text":"Define outcome variable (condition_list): Define predictor variables (conditions condition_list observations observation_list): point, script perform rest process automatically. can tweak previous settings fit needs.","code":"outcome_concept_id <- 255573 # Chronic Obstructive Pulmonary Disease (COPD) observation_list <- c(     4005823 # Tobacco use )  condition_list <- c(     317009, # History of asthma     436070, # Rheumatoid arthritis     80809   # Vitamin D deficiency )"},{"path":"/articles/03_template.html","id":"automatic-dataset-construction","dir":"Articles","previous_headings":"","what":"Automatic dataset construction","title":"Basic GLM with booleans template","text":"script perform following steps automatically: Retrieve variables database: Match concept IDs concept catalogs: Convert variables boolean: Create new table prepared outcome predictors:","code":"o$auto(     table = \"condition_occurrence\",      concepts = c(outcome_concept_id, condition_list),     columns = c(\"condition_occurrence_id\")      # We only want the condition occurrence ID to act as a boolean indicating      # the presence of the condition occurrence )  o$auto(     table = \"observation\",      concepts = observation_list,     columns = c(\"observation_id\")     # We only want the observation ID to act as a boolean indicating      # the presence of the observation ) custom_make_names <- function(name) {   name <- make.names(name)   name <- tolower(name)   name <- gsub(\"\\\\.\", \"_\", name)   name <- gsub(\"_+\", \"_\", name)   name <- gsub(\"^_|_$\", \"\", name)   return(name) }  # Retrieve the concept catalogs for condition occurrence and observation all_concepts_condition <- o$concepts(\"condition_occurrence\", .Machine$integer.max)$server1 all_concepts_observation <- o$concepts(\"observation\", .Machine$integer.max)$server1  # Match the concept IDs to the concept catalogs matched_concept_condition <- all_concepts_condition[all_concepts_condition$concept_id == outcome_concept_id, ] matched_concepts_conditions <- all_concepts_condition[all_concepts_condition$concept_id %in% condition_list, ] matched_concepts_observation <- all_concepts_observation[all_concepts_observation$concept_id %in% observation_list, ] convert_to_numeric_and_boolean <- function(variable_name, id_type, conns) {   # Construct the full variable name in the format \"original_dataset$variable_name.id_type\"   full_variable_name <- paste0(\"original_dataset$\", variable_name, \".\", id_type)   # Create a new variable name for the numeric conversion   new_numeric_name <- paste0(variable_name, \"_numeric\")      # Convert the original variable to numeric   ds.asNumeric(     x.name = full_variable_name,      newobj = new_numeric_name,      datasources = conns   )    # Convert the numeric variable to boolean   # True (1) if not equal to 0, False (0) otherwise   # NA values are assigned 0   ds.Boole(     V1 = new_numeric_name,      V2 = 0,      Boolean.operator = \"!=\",      numeric.output = TRUE,      na.assign = 0,      newobj = variable_name   ) }  # Get the name of the outcome variable as it will be in the dataset outcome_variable <- custom_make_names(matched_concept_condition$concept_name) # Perform the type conversion of the outcome variable to numeric and then to boolean convert_to_numeric_and_boolean(outcome_variable, \"condition_occurrence_id\", conns) ## $is.object.created ## [1] \"A data object <chronic_obstructive_pulmonary_disease> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<chronic_obstructive_pulmonary_disease> appears valid in all sources\" # Loop through every recognized condition occurrence concept for (concept in matched_concepts_conditions$concept_name) {   # Get the exact name of the condition occurrence as it will be in the dataset   variable_name <- custom_make_names(concept)      # Perform the type conversion of the condition occurrence to numeric and then to boolean   convert_to_numeric_and_boolean(variable_name, \"condition_occurrence_id\", conns) }  # Loop through every recognized observation concept for (concept in matched_concepts_observation$concept_name) {   # Get the exact name of the observation as it will be in the dataset   variable_name <- custom_make_names(concept)      # Perform the type conversion of the observation to numeric and then to boolean   convert_to_numeric_and_boolean(variable_name, \"observation_id\", conns) } # Get the exact name of the variables as they will be in the dataset variable_names <- c(   unname(sapply(matched_concepts_observation$concept_name, custom_make_names)),   unname(sapply(matched_concepts_conditions$concept_name, custom_make_names)),   custom_make_names(outcome_variable) )  # Create a new table with the prepared outcome and predictors ds.cbind(   x = variable_names,   DataSHIELD.checks = FALSE,   newobj = \"glm_table\",   datasources = conns ) ## $is.object.created ## [1] \"A data object <glm_table> has been created in all specified data sources\" ##  ## $validity.check ## [1] \"<glm_table> appears valid in all sources\""},{"path":"/articles/03_template.html","id":"generalized-linear-model","dir":"Articles","previous_headings":"","what":"Generalized Linear Model","title":"Basic GLM with booleans template","text":"runs GLM prepared dataset:","code":"# Define the formula for the GLM formula <- paste0(   \"glm_table$\", outcome_variable, \" ~ \",    paste(     c(       paste0(\"glm_table$\", custom_make_names(matched_concepts_observation$concept_name)),       paste0(\"glm_table$\", custom_make_names(matched_concepts_conditions$concept_name))     ),     collapse = \" + \"   ) )  # Fit the GLM ds.glm(   formula = formula,    data = \"glm_table\",    family = \"binomial\" ) ## Iteration 1... ## CURRENT DEVIANCE:      799545.272775899 ## Iteration 2... ## CURRENT DEVIANCE:      150908.943618453 ## Iteration 3... ## CURRENT DEVIANCE:      55730.6336932221 ## Iteration 4... ## CURRENT DEVIANCE:      25978.8812722575 ## Iteration 5... ## CURRENT DEVIANCE:      16427.1712550937 ## Iteration 6... ## CURRENT DEVIANCE:      13728.4660277487 ## Iteration 7... ## CURRENT DEVIANCE:      13212.4202711421 ## Iteration 8... ## CURRENT DEVIANCE:      13174.3225459055 ## Iteration 9... ## CURRENT DEVIANCE:      13173.9773732026 ## Iteration 10... ## CURRENT DEVIANCE:      13173.9773376503 ## SUMMARY OF MODEL STATE after iteration 10 ## Current deviance 13173.9773376503 on 576745 degrees of freedom ## Convergence criterion TRUE (2.69865638800875e-09) ##  ## beta: -6.57208257125441 1.86076036194523 2.10686184613584 2.99687577901109 1.81480354710726 ##  ## Information matrix overall: ##                                (Intercept) glm_table$tobacco_user ## (Intercept)                     908.192745             17.1155746 ## glm_table$tobacco_user           17.115575             17.1155746 ## glm_table$rheumatoid_arthritis    6.314986              0.3047287 ## glm_table$asthma                 83.616164              2.3094945 ## glm_table$vitamin_d_deficiency   10.682704              0.3967034 ##                                glm_table$rheumatoid_arthritis ## (Intercept)                                         6.3149856 ## glm_table$tobacco_user                              0.3047287 ## glm_table$rheumatoid_arthritis                      6.3149856 ## glm_table$asthma                                    1.3056855 ## glm_table$vitamin_d_deficiency                      0.3696729 ##                                glm_table$asthma ## (Intercept)                           83.616164 ## glm_table$tobacco_user                 2.309494 ## glm_table$rheumatoid_arthritis         1.305686 ## glm_table$asthma                      83.616164 ## glm_table$vitamin_d_deficiency         1.126865 ##                                glm_table$vitamin_d_deficiency ## (Intercept)                                        10.6827036 ## glm_table$tobacco_user                              0.3967034 ## glm_table$rheumatoid_arthritis                      0.3696729 ## glm_table$asthma                                    1.1268653 ## glm_table$vitamin_d_deficiency                     10.6827036 ##  ## Score vector overall: ##                                         [,1] ## (Intercept)                    -1.769136e-05 ## glm_table$tobacco_user         -3.452932e-08 ## glm_table$rheumatoid_arthritis -2.035968e-08 ## glm_table$asthma               -3.232403e-08 ## glm_table$vitamin_d_deficiency -2.276134e-08 ##  ## Current deviance: 13173.9773376503 ## $Nvalid ## [1] 576750 ##  ## $Nmissing ## [1] 0 ##  ## $Ntotal ## [1] 576750 ##  ## $disclosure.risk ##         RISK OF DISCLOSURE ## server1                  0 ##  ## $errorMessage ##         ERROR MESSAGES ## server1 \"No errors\"    ##  ## $nsubs ## [1] 576750 ##  ## $iter ## [1] 10 ##  ## $family ##  ## Family: binomial  ## Link function: logit  ##  ##  ## $formula ## [1] \"glm_table$chronic_obstructive_pulmonary_disease ~ glm_table$tobacco_user +      glm_table$rheumatoid_arthritis + glm_table$asthma + glm_table$vitamin_d_deficiency\" ##  ## $coefficients ##                                 Estimate Std. Error     z-value ## (Intercept)                    -6.572083 0.03534378 -185.947355 ## glm_table$tobacco_user          1.860760 0.24413811    7.621753 ## glm_table$rheumatoid_arthritis  2.106862 0.39986610    5.268918 ## glm_table$asthma                2.996876 0.11485691   26.092255 ## glm_table$vitamin_d_deficiency  1.814804 0.30800707    5.892084 ##                                      p-value low0.95CI.LP high0.95CI.LP ## (Intercept)                     0.000000e+00    -6.641355     -6.502810 ## glm_table$tobacco_user          2.502536e-14     1.382258      2.339262 ## glm_table$rheumatoid_arthritis  1.372299e-07     1.323139      2.890585 ## glm_table$asthma               4.463685e-150     2.771760      3.221991 ## glm_table$vitamin_d_deficiency  3.813549e-09     1.211121      2.418486 ##                                        P_OR low0.95CI.P_OR ## (Intercept)                     0.001396927    0.001303556 ## glm_table$tobacco_user          6.428622994    3.983888931 ## glm_table$rheumatoid_arthritis  8.222397606    3.755189296 ## glm_table$asthma               20.022883190   15.986751946 ## glm_table$vitamin_d_deficiency  6.139869864    3.357245312 ##                                high0.95CI.P_OR ## (Intercept)                        0.001496976 ## glm_table$tobacco_user            10.373580768 ## glm_table$rheumatoid_arthritis    18.003838708 ## glm_table$asthma                  25.078005376 ## glm_table$vitamin_d_deficiency    11.228849381 ##  ## $dev ## [1] 13173.98 ##  ## $df ## [1] 576745 ##  ## $output.information ## [1] \"SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES\""},{"path":"/articles/demo.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"General demonstration","text":"using dsOMOPHelper, recommended basic understanding : OMOP CDM structure standardized clinical data format. can learn OMOP CDM OHDSI Book chapter ‘Common Data Model’. OMOP Vocabularies standardize medical concepts (like diagnoses, medications, procedures) across different coding systems (ICD-9, ICD-10, SNOMED CT, etc.) common representation. OHDSI Book chapter ‘Standardized Vocabularies’ provides comprehensive overview standardization process. Basic DataSHIELD concepts workflow. DataSHIELD Beginner’s Tutorial good starting point. knowledge help better understand effectively query work OMOP CDM data DataSHIELD infrastructure.","code":""},{"path":"/articles/demo.html","id":"establishing-a-connection","dir":"Articles","previous_headings":"","what":"Establishing a connection","title":"General demonstration","text":"example, using MIMIC IV data available OBiBa’s public Opal demo server. server publicly accessible, users able reproduce examples guide executing commands R session. access credentials : Server URL: https://opal-demo.obiba.org User: dsuser Password: P@ssw0rd Profile: omop First, establish connection demo server using DSI provided credentials:","code":"library(DSI) library(DSOpal) library(dsBaseClient) library(dsOMOPClient) library(dsOMOPHelper)  builder <- newDSLoginBuilder() builder$append(   server = \"opal_demo\",   url = \"https://opal-demo.obiba.org\",   user = \"dsuser\",   password = \"P@ssw0rd\",   profile = \"omop\" ) logindata <- builder$build() conns <- datashield.login(logins = logindata)"},{"path":"/articles/demo.html","id":"creating-an-interface-helper-object","dir":"Articles","previous_headings":"","what":"Creating an interface helper object","title":"General demonstration","text":"successfully established connection server, create interface helper object ds.omop.helper. function creates interface object allows users interact OMOP CDM database based resource. can use methods available object obtain data database applying desired filters querying data catalogs information present database. server contains database connection resource name mimiciv within omop_demo project. Therefore, need specify , connection established, want take omop_demo.mimiciv resource. also need specify symbol want use refer object. case, use mimiciv symbol name: creating helper object, data Person table automatically loaded specified symbol, case, mimiciv. can check contents symbol using ds.summary function dsBaseClient: Therefore, using Person table foundation since serves central link clinical data tables OMOP CDM databases. , build study-specific table adding necessary data tables based variables required particular study.","code":"o <- ds.omop.helper(connections = conns,                     resource = \"omop_demo.mimiciv\",                     symbol = \"mimiciv\") ds.summary(\"mimiciv\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 5 ##  ## $opal_demo$`variables held` ## [1] \"person_id\"            \"gender_concept_id\"    \"year_of_birth\"        ## [4] \"race_concept_id\"      \"ethnicity_concept_id\""},{"path":"/articles/demo.html","id":"exploring-the-data","dir":"Articles","previous_headings":"","what":"Exploring the data","title":"General demonstration","text":"can construct study table, ’s essential understand data available database. achieve , can use data exploration methods provided ds.omop.helper, allow us identify available tables database, well concepts columns table contains.","code":""},{"path":"/articles/demo.html","id":"tables","dir":"Articles","previous_headings":"Exploring the data","what":"Tables","title":"General demonstration","text":"tables method returns list available tables database:","code":"o$tables() ## $opal_demo ##  [1] \"attribute_definition\" \"care_site\"            \"cdm_source\"           ##  [4] \"cohort\"               \"cohort_attribute\"     \"cohort_definition\"    ##  [7] \"concept\"              \"concept_relationship\" \"condition_era\"        ## [10] \"condition_occurrence\" \"cost\"                 \"death\"                ## [13] \"device_exposure\"      \"dose_era\"             \"drug_era\"             ## [16] \"drug_exposure\"        \"fact_relationship\"    \"location\"             ## [19] \"measurement\"          \"metadata\"             \"note\"                 ## [22] \"note_nlp\"             \"observation\"          \"observation_period\"   ## [25] \"payer_plan_period\"    \"person\"               \"procedure_occurrence\" ## [28] \"provider\"             \"specimen\"             \"visit_detail\"         ## [31] \"visit_occurrence\"     \"vocabulary\""},{"path":"/articles/demo.html","id":"concepts","dir":"Articles","previous_headings":"Exploring the data","what":"Concepts","title":"General demonstration","text":"concepts method returns data frame functions dictionary available concepts within specific table. , concept_id refers identifier present concepts, concept_name textual name assigned concept. instance, want explore concepts available Condition_occurrence table:","code":"o$concepts(\"condition_occurrence\") ## $opal_demo ##    concept_id             concept_name ## 1       27674      Nausea and vomiting ## 2       29735     Candidiasis of mouth ## 3       31317                Dysphagia ## 4       73553              Arthropathy ## 5       75576 Irritable bowel syndrome ## 6       75860             Constipation ## 7       77670               Chest pain ## 8       78232      Shoulder joint pain ## 9       79864       Hematuria syndrome ## 10      80180           Osteoarthritis ##  [ reached 'max' / getOption(\"max.print\") -- omitted 236 rows ]"},{"path":"/articles/demo.html","id":"columns","dir":"Articles","previous_headings":"Exploring the data","what":"Columns","title":"General demonstration","text":"columns method returns list available column names specific table. enables us understand information can extract table, allowing us select columns necessary study:","code":"o$columns(\"condition_occurrence\") ## $opal_demo ## $opal_demo$condition_occurrence ##  [1] \"condition_occurrence_id\"       \"person_id\"                     ##  [3] \"condition_concept_id\"          \"condition_start_date\"          ##  [5] \"condition_start_datetime\"      \"condition_end_date\"            ##  [7] \"condition_end_datetime\"        \"condition_type_concept_id\"     ##  [9] \"stop_reason\"                   \"provider_id\"                   ## [11] \"visit_occurrence_id\"           \"visit_detail_id\"               ## [13] \"condition_source_value\"        \"condition_source_concept_id\"   ## [15] \"condition_status_source_value\" \"condition_status_concept_id\""},{"path":"/articles/demo.html","id":"retrieving-tables","dir":"Articles","previous_headings":"","what":"Retrieving tables","title":"General demonstration","text":"explored data available database, now ready build study-specific table. , ’ll employ auto method provided dsOMOPHelper. method simplifies task automatically extracting appending variables various tables initial table (currently includes data Person table). auto method uses following arguments: tables: character vector names tables want extract data. concepts: numeric vector concept IDs concepts want extract. columns: character vector column names tables want extract data. optional, highly recommended utilize expedite data extraction process construction study table. instance, let’s assume , data exploration phase using methods described , decided extract data condition Cardiac arrhythmia, concept ID 44784217 found Condition_occurrence table, observation Body mass index 40+ - severely obese, concept ID 4256640 located Observation table. want columns related variables, specify column filters. call auto method follows: can see, table mimiciv now contains information Condition_occurrence Observation tables, columns related variables interest.","code":"o$auto(tables = c(\"condition_occurrence\", \"observation\"),        concepts = c(44784217, 4256640))  ds.summary(\"mimiciv\") ## $opal_demo ## $opal_demo$class ## [1] \"data.frame\" ##  ## $opal_demo$`number of rows` ## [1] 100 ##  ## $opal_demo$`number of columns` ## [1] 18 ##  ## $opal_demo$`variables held` ##  [1] \"person_id\"                                                     ##  [2] \"gender_concept_id\"                                             ##  [3] \"year_of_birth\"                                                 ##  [4] \"race_concept_id\"                                               ##  [5] \"ethnicity_concept_id\"                                          ##  [6] \"cardiac_arrhythmia.condition_occurrence_id\"                    ##  [7] \"cardiac_arrhythmia.condition_start_date\"                       ##  [8] \"cardiac_arrhythmia.condition_start_datetime\"                   ##  [9] \"cardiac_arrhythmia.condition_end_date\"                         ## [10] \"cardiac_arrhythmia.condition_end_datetime\"                     ## [11] \"cardiac_arrhythmia.condition_type_concept_id\"                  ## [12] \"cardiac_arrhythmia.visit_occurrence_id\"                        ## [13] \"body_mass_index_40_severely_obese.observation_id\"              ## [14] \"body_mass_index_40_severely_obese.observation_date\"            ## [15] \"body_mass_index_40_severely_obese.observation_datetime\"        ## [16] \"body_mass_index_40_severely_obese.observation_type_concept_id\" ## [17] \"body_mass_index_40_severely_obese.value_as_string\"             ## [18] \"body_mass_index_40_severely_obese.visit_occurrence_id\""},{"path":"/articles/demo.html","id":"examples-of-usage","dir":"Articles","previous_headings":"","what":"Examples of usage","title":"General demonstration","text":"section, explore examples can use data extraction functions dsOMOPHelper conjunction DataSHIELD’s environment functions manipulate analyze data. Let’s say want add observation Marital status [NHANES] study table. , first need identify corresponding concept, case 40766231 found Observation table database. instance, since interested primary value categorical variable, aim retrieve data value_as_concept_id column. call auto function follows: can see, successfully obtained categorical variable containing marital status information patients, specifically following categories: divorced, married, never_married, widowed. Now, can use ds.table function dsBaseClient obtain frequency table variable: now want extract numerical variable, instance, Body weight, identified concept ID 3025315 located Measurement table. scenario, goal retrieve data value_as_number column. call auto function follows: can see, successfully obtained numerical variable contains body weight patients. visually inspect distribution variable, can generate histogram using ds.histogram function dsBaseClient:  Finally, perform generalized linear regression (GLM) analysis evaluate relationship blood glucose, hemoglobin A1c, vitamin B12. , first need extract variables interest corresponding tables, present Measurement table. blood glucose, use concept ID 3000483, corresponds Glucose [Mass/volume] Blood. hemoglobin A1c, concept ID 3004410, representing Hemoglobin A1c/Hemoglobin.total Blood. Lastly, vitamin B12, refer concept ID 3000593, linked Cobalamin (Vitamin B12) [Mass/volume] Serum Plasma. objective extract numerical values variables, hence focus retrieving data specifically value_as_number column. data extracted, can use ds.glm function dsBaseClient perform generalized linear regression analysis: can see, data extracted dsOMOPHelper can perfectly integrated DataSHIELD’s environment functions perform wide range operations, simple descriptive statistics complex statistical modeling. However, due reduced size sample data available public demo server, results GLM analysis statistically significant. statistically significant analysis, included COPD analysis vignette reproduces studies literature using larger database publicly available demo server.","code":"o$auto(tables = c(\"observation\"),        concepts = c(40766231),        columns = c(\"value_as_concept_id\"))  ds.summary(\"mimiciv$marital_status_nhanes.value_as_concept_id\") ## $opal_demo ## $opal_demo$class ## [1] \"factor\" ##  ## $opal_demo$length ## [1] 100 ##  ## $opal_demo$categories ## [1] \"divorced\"      \"married\"       \"never_married\" \"widowed\"       ##  ## $opal_demo$`count of 'divorced'` ## [1] 10 ##  ## $opal_demo$`count of 'married'` ## [1] 36 ##  ## $opal_demo$`count of 'never_married'` ## [1] 30 ##  ## $opal_demo$`count of 'widowed'` ## [1] 12 ds.table(\"mimiciv$marital_status_nhanes.value_as_concept_id\") ##  ##  Data in all studies were valid  ##  ## Study 1 :  No errors reported from this study ## $output.list ## $output.list$TABLE_rvar.by.study_row.props ##                                                  study ## mimiciv$marital_status_nhanes.value_as_concept_id opal_demo ##                                     divorced              1 ##                                     married               1 ##                                     never_married         1 ##                                     widowed               1 ##                                     NA                    1 ##  ## $output.list$TABLE_rvar.by.study_col.props ##                                                  study ## mimiciv$marital_status_nhanes.value_as_concept_id opal_demo ##                                     divorced           0.10 ##                                     married            0.36 ##                                     never_married      0.30 ##                                     widowed            0.12 ##                                     NA                 0.12 ##  ## $output.list$TABLE_rvar.by.study_counts ##                                                  study ## mimiciv$marital_status_nhanes.value_as_concept_id opal_demo ##                                     divorced             10 ##                                     married              36 ##                                     never_married        30 ##                                     widowed              12 ##                                     NA                   12 ##  ## $output.list$TABLES.COMBINED_all.sources_proportions ## mimiciv$marital_status_nhanes.value_as_concept_id ##      divorced       married never_married       widowed            NA  ##          0.10          0.36          0.30          0.12          0.12  ##  ## $output.list$TABLES.COMBINED_all.sources_counts ## mimiciv$marital_status_nhanes.value_as_concept_id ##      divorced       married never_married       widowed            NA  ##            10            36            30            12            12  ##  ##  ## $validity.message ## [1] \"Data in all studies were valid\" o$auto(tables = c(\"measurement\"),        concepts = c(3025315),        columns = c(\"value_as_number\"))  ds.summary(\"mimiciv$body_weight.value_as_number\") ## $opal_demo ## $opal_demo$class ## [1] \"numeric\" ##  ## $opal_demo$length ## [1] 100 ##  ## $opal_demo$`quantiles & mean` ##        5%       10%       25%       50%       75%       90%       95%  ##  52.43500  59.26000  68.70000  80.00000  97.22500 121.95000 149.09000  ##      Mean  ##  86.80918 ds.histogram(\"mimiciv$body_weight.value_as_number\") ## $breaks ##  [1]  37.91096  54.73780  71.56463  88.39147 105.21830 122.04514 138.87198 ##  [8] 155.69881 172.52565 189.35248 206.17932 ##  ## $counts ##  [1]  8 24 29 20  7  3  0  3  0  0 ##  ## $density ##  [1] 0.004851337 0.014554011 0.017586097 0.012128343 0.004244920 ##  [6] 0.001819251 0.000000000 0.001819251 0.000000000 0.000000000 ##  ## $mids ##  [1]  46.32438  63.15121  79.97805  96.80489 113.63172 130.45856 147.28539 ##  [8] 164.11223 180.93906 197.76590 ##  ## $xname ## [1] \"xvect\" ##  ## $equidist ## [1] TRUE ##  ## attr(,\"class\") ## [1] \"histogram\" o$auto(tables = c(\"measurement\"),        concepts = c(3000483, 3004410, 3000593),        columns = c(\"value_as_number\"))  ds.glm(formula = \"glucose_mass_volume_in_blood.value_as_number ~                    hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number +                    cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number\",        data = \"mimiciv\",        family = \"gaussian\",        datasources = conns) ## $Nvalid ## [1] 10 ##  ## $Nmissing ## [1] 90 ##  ## $Ntotal ## [1] 100 ##  ## $disclosure.risk ##           RISK OF DISCLOSURE ## opal_demo                  0 ##  ## $errorMessage ##           ERROR MESSAGES ## opal_demo \"No errors\"    ##  ## $nsubs ## [1] 10 ##  ## $iter ## [1] 3 ##  ## $family ##  ## Family: gaussian  ## Link function: identity  ##  ##  ## $formula ## [1] \"glucose_mass_volume_in_blood.value_as_number ~ hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number +      cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number\" ##  ## $coefficients ##                                                                          Estimate ## (Intercept)                                                          120.95889328 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number               0.82795236 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number  -0.01610667 ##                                                                       Std. Error ## (Intercept)                                                          89.11697092 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number             11.55494959 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number  0.04187167 ##                                                                          z-value ## (Intercept)                                                           1.35730481 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number              0.07165348 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number -0.38466759 ##                                                                        p-value ## (Intercept)                                                          0.1746844 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number             0.9428777 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number 0.7004837 ##                                                                         low0.95CI ## (Intercept)                                                          -53.70716014 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number             -21.81933267 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number  -0.09817364 ##                                                                        high0.95CI ## (Intercept)                                                          295.62494670 ## hemoglobin_a1c_hemoglobin_total_in_blood.value_as_number              23.47523740 ## cobalamin_vitamin_b12_mass_volume_in_serum_or_plasma.value_as_number   0.06596029 ##  ## $dev ## [1] 21068.15 ##  ## $df ## [1] 7 ##  ## $output.information ## [1] \"SEE TOP OF OUTPUT FOR INFORMATION ON MISSING DATA AND ERROR MESSAGES\""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Sarrat González. Author, maintainer. Xavier Escribà-Montagut. Author. Juan R González. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sarrat González D, Escribà-Montagut X, González J (2024). dsOMOPHelper: dsOMOP Helper Functions. R package version 1.0.0.","code":"@Manual{,   title = {dsOMOPHelper: dsOMOP Helper Functions},   author = {David {Sarrat González} and Xavier Escribà-Montagut and Juan R González},   year = {2024},   note = {R package version 1.0.0}, }"},{"path":[]},{"path":"/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"dsOMOP Helper Functions","text":"dsOMOPHelper package extension dsOMOPClient, designed streamline interaction databases Observational Medical Outcomes Partnership (OMOP) Common Data Model (CDM) format within DataSHIELD environment. package simplifies process fetching tables integrating DataSHIELD workflow, adhering privacy standards disclosure control mechanisms DataSHIELD. combining commands dsOMOPClient dsBaseClient (invokes standard DataSHIELD workflow operations), dsOMOPHelper significantly reduces complexity involved utilizing dsOMOPClient common use cases. particularly beneficial epidemiological studies require data OMOP CDM database analyzed securely within DataSHIELD framework. dsOMOPHelper significantly enhances functionality dsOMOPClient catering common research needs, important note specific use cases, functions dsOMOPHelper may offer sufficient flexibility. instances, operations dsOMOPClient directly utilized ensure desired outcomes. users requiring advanced functionalities, exploring comprehensive documentation dsOMOPClient highly recommended fully leverage potential tool complex research scenarios: https://github.com/isglobal-brge/dsOMOPClient. strongly encourage community contribute creating packages similar dsOMOPHelper built top dsOMOPClient. leveraging foundational capabilities dsOMOPClient, developers can craft specialized tools address specific needs emerging intersection OMOP CDM DataSHIELD environments.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"dsOMOP Helper Functions","text":"install package dsOMOPHelper, follow steps . guide assumes R installed system necessary permissions install R packages. dsOMOPHelper package can installed directly GitHub using devtools package. devtools installed, can install using following command R: can install dsOMOPHelper package using following command R: package installed, can load R environment using following command:","code":"install.packages(\"devtools\") devtools::install_github('isglobal-brge/dsOMOPHelper') library(dsOMOPHelper)"},{"path":"/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"dsOMOP Helper Functions","text":"development dsOMOP supported RadGen4COPD, P4COPD, CADSET, DATOS-CAT projects. collaborations provided essential financial backing also affirmed project’s relevance application significant research endeavors. project received funding Spanish Ministry Science Innovation State Research Agency “Centro de Excelencia Severo Ochoa 2019-2023” Program [CEX2018-000806-S] State Research Agency Fondo Europeo de Desarrollo Regional, UE (PID2021-122855OB-I00), support Generalitat de Catalunya CERCA Program Ministry Research Universities (2021 SGR 01563). project received funding “Complementary Plan Biotechnology Applied Health”, coordinated Institut de Bioenginyeria de Catalunya (IBEC) within framework Recovery, Transformation, Resilience Plan (C17.I1) - Funded European Union - NextGenerationEU. Special thanks Xavier Escribà-Montagut invaluable support development process.","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"dsOMOP Helper Functions","text":"information inquiries, please contact: Juan R González: juanr.gonzalez@isglobal.org David Sarrat González: david.sarrat@isglobal.org details DataSHIELD, visit https://www.datashield.org. information Barcelona Institute Global Health (ISGlobal), visit https://www.isglobal.org.","code":""},{"path":"/reference/OMOPCDMHelper-append.html","id":null,"dir":"Reference","previous_headings":"","what":"Append a table to the base table — OMOPCDMHelper-append","title":"Append a table to the base table — OMOPCDMHelper-append","text":"function appends specified table OMOP CDM database base table, options filter columns, apply concept filters, specify merge conditions.","code":""},{"path":"/reference/OMOPCDMHelper-append.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append a table to the base table — OMOPCDMHelper-append","text":"table character string specifying name table append data . columns Optional; vector column names include operation. concepts Optional; list concept IDs filter data . merge.x Optional; character string specifying column name base table merge . merge.y Optional; character string specifying column name target table merge . ... Additional parameters passed underlying get method.","code":""},{"path":"/reference/OMOPCDMHelper-append.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append a table to the base table — OMOPCDMHelper-append","text":"function return value modifies database appending data specified table.","code":""},{"path":"/reference/OMOPCDMHelper-auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Auto-append function for OMOP CDM Helper — OMOPCDMHelper-auto","title":"Auto-append function for OMOP CDM Helper — OMOPCDMHelper-auto","text":"function automatically appends data specified tables OMOP CDM database base table, options filter columns concepts. excludes 'person' 'concept' tables default warns filters provided, potentially impacting performance.","code":""},{"path":"/reference/OMOPCDMHelper-auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Auto-append function for OMOP CDM Helper — OMOPCDMHelper-auto","text":"tables Optional; vector table names include operation. NULL, person-related tables considered except 'person' 'concept'. columns Optional; vector column names include operation. concepts Optional; list concept IDs filter data . silent Optional; boolean indicating whether suppress warnings. ... Additional arguments pass append method.","code":""},{"path":"/reference/OMOPCDMHelper-columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Columns from OMOP CDM Database — OMOPCDMHelper-columns","title":"Retrieve Columns from OMOP CDM Database — OMOPCDMHelper-columns","text":"method fetches comprehensive list columns specified tables within OMOP CDM database. across connected servers. leverages underlying OMOPCDMDatabase class query database fetch catalog columns.","code":""},{"path":"/reference/OMOPCDMHelper-columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Columns from OMOP CDM Database — OMOPCDMHelper-columns","text":"tables Optional; vector table names include operation. NULL, tables considered.","code":""},{"path":"/reference/OMOPCDMHelper-columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Columns from OMOP CDM Database — OMOPCDMHelper-columns","text":"list containing names columns available specified tables OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMHelper-concepts.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Concepts Dictionary from OMOP CDM Database — OMOPCDMHelper-concepts","title":"Retrieve Concepts Dictionary from OMOP CDM Database — OMOPCDMHelper-concepts","text":"function fetches dictionary concepts specified tables within OMOP CDM database. across connected servers. leverages underlying OMOPCDMDatabase class query database fetch catalog concepts.","code":""},{"path":"/reference/OMOPCDMHelper-concepts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Concepts Dictionary from OMOP CDM Database — OMOPCDMHelper-concepts","text":"tables Optional; vector table names include operation. NULL, tables considered. max_length Optional; integer specifying maximum length concept names. default, set 60.","code":""},{"path":"/reference/OMOPCDMHelper-concepts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Concepts Dictionary from OMOP CDM Database — OMOPCDMHelper-concepts","text":"list containing concepts available specified tables OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMHelper-get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Table from OMOP CDM Database — OMOPCDMHelper-get","title":"Get Table from OMOP CDM Database — OMOPCDMHelper-get","text":"method retrieves specified table name OMOP CDM database assigns DataSHIELD environment. allows user specify filters concepts, columns, persons, well options merging dropping empty columns.","code":""},{"path":"/reference/OMOPCDMHelper-get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Table from OMOP CDM Database — OMOPCDMHelper-get","text":"table string specifying name table retrieved. symbol optional string specifying symbol table assignment DataSHIELD environment. columnFilter optional string vector specifying column names filter (select) table. conceptFilter optional numeric vector specifying concept IDs filter table . personFilter optional string specifying symbol environment table obtain person IDs. mergeColumn optional string specifying column name merging operations tables. Defaults \"person_id\" specified. dropNA optional boolean indicating whether drop empty columns. Defaults FALSE. ... Additional parameters passed underlying get method.","code":""},{"path":"/reference/OMOPCDMHelper-get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Table from OMOP CDM Database — OMOPCDMHelper-get","text":"Assigns specified table DataSHIELD environment, optionally filtered merged.","code":""},{"path":"/reference/OMOPCDMHelper-tables.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Tables from OMOP CDM Database — OMOPCDMHelper-tables","title":"Retrieve Tables from OMOP CDM Database — OMOPCDMHelper-tables","text":"function fetches list tables present OMOP CDM database. across connected servers. leverages underlying OMOPCDMDatabase class query database fetch catalog tables.","code":""},{"path":"/reference/OMOPCDMHelper-tables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Tables from OMOP CDM Database — OMOPCDMHelper-tables","text":"list containing names tables available OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMHelper.html","id":null,"dir":"Reference","previous_headings":"","what":"OMOP CDM Helper — OMOPCDMHelper","title":"OMOP CDM Helper — OMOPCDMHelper","text":"class facilitates creation tables connection OMOP CDM database.","code":""},{"path":"/reference/OMOPCDMHelper.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"OMOP CDM Helper — OMOPCDMHelper","text":"OMOPCDMDatabase object representing connection OMOP CDM database. symbol symbol used reference retrieved data DataSHIELD environment. Constructor OMOP CDM Helper","code":""},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"OMOP CDM Helper — OMOPCDMHelper","text":"OMOPCDMHelper$new() OMOPCDMHelper$append() OMOPCDMHelper$tables() OMOPCDMHelper$columns() OMOPCDMHelper$concepts() OMOPCDMHelper$auto() OMOPCDMHelper$get() OMOPCDMHelper$clone()","code":""},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$new(   connections,   resource,   symbol,   personColumns = NULL,   personFilter = NULL,   ... )"},{"path":"/reference/OMOPCDMHelper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"OMOP CDM Helper — OMOPCDMHelper","text":"connections Connection object DataSHIELD server. resource Either identifier named list identifiers specific resource(s) within DataSHIELD server(s). named list, name resource identifier correspond server name connections. symbol character string representing symbol resource assigned. personColumns Optional; vector column names filter person table. personFilter Optional; character string representing another object DataSHIELD environment whose person IDs used filter processed data (speeds processing data person IDs needed). ... Additional parameters passed underlying get method.","code":""},{"path":"/reference/OMOPCDMHelper.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"OMOP CDM Helper — OMOPCDMHelper","text":"object class OMOPCDMHelper.","code":""},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$append(   table,   columns = NULL,   concepts = NULL,   merge.x = NULL,   merge.y = NULL,   ... )"},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$tables()"},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$columns(tables = NULL)"},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$concepts(tables = NULL, max_length = 60)"},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$auto(   tables = NULL,   columns = NULL,   concepts = NULL,   silent = FALSE,   ... )"},{"path":[]},{"path":"/reference/OMOPCDMHelper.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$get(   table,   symbol = NULL,   columnFilter = NULL,   conceptFilter = NULL,   personFilter = NULL,   mergeColumn = NULL,   dropNA = FALSE,   ... )"},{"path":"/reference/OMOPCDMHelper.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"OMOP CDM Helper — OMOPCDMHelper","text":"objects class cloneable method.","code":""},{"path":"/reference/OMOPCDMHelper.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"OMOP CDM Helper — OMOPCDMHelper","text":"","code":"OMOPCDMHelper$clone(deep = FALSE)"},{"path":"/reference/OMOPCDMHelper.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"OMOP CDM Helper — OMOPCDMHelper","text":"deep Whether make deep clone.","code":""},{"path":"/reference/ds.omop.helper.html","id":null,"dir":"Reference","previous_headings":"","what":"Factory function for OMOP CDM Helper — ds.omop.helper","title":"Factory function for OMOP CDM Helper — ds.omop.helper","text":"function creates new instance OMOPCDMHelper class, allowing interaction OMOP CDM database DataSHIELD environment.","code":""},{"path":"/reference/ds.omop.helper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Factory function for OMOP CDM Helper — ds.omop.helper","text":"","code":"ds.omop.helper(   connections,   resource,   symbol,   personColumns = NULL,   personFilter = NULL,   ... )"},{"path":"/reference/ds.omop.helper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Factory function for OMOP CDM Helper — ds.omop.helper","text":"connections Connection object DataSHIELD server. resource Either identifier named list identifiers specific resource(s) within DataSHIELD server(s). named list, name resource identifier correspond server name connections. symbol character string representing symbol resource assigned. personColumns Optional; vector column names filter person table. personFilter Optional; character string representing another object DataSHIELD environment whose person IDs used filter processed data (speeds processing data person IDs needed). ... Additional parameters passed underlying get method.","code":""},{"path":"/reference/ds.omop.helper.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Factory function for OMOP CDM Helper — ds.omop.helper","text":"new instance OMOPCDMHelper class.","code":""},{"path":"/reference/generateTableColumns.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate table column names with prefixes — generateTableColumns","title":"Generate table column names with prefixes — generateTableColumns","text":"function generates list column names specified table, optionally prefixing table name. designed handle cases column names provided, case simply returns NULL. function also removes \"_occurrence\" \"_exposure\" suffixes table name prefixing, ensuring cleaner column name output.","code":""},{"path":"/reference/generateTableColumns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate table column names with prefixes — generateTableColumns","text":"","code":"generateTableColumns(tableName, columnNames)"},{"path":"/reference/generateTableColumns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate table column names with prefixes — generateTableColumns","text":"tableName character string specifying name table. columnNames optional vector column names include operation.","code":""},{"path":"/reference/generateTableColumns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate table column names with prefixes — generateTableColumns","text":"vector column names, optionally prefixed modified table name. column names provided, function returns NULL.","code":""}]
